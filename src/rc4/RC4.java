/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rc4;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author user
 */
public class RC4 extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public RC4() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        fileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        radioEnkripsi = new javax.swing.JRadioButton();
        radioDekripsi = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        buttonInputText = new javax.swing.JButton();
        buttonInputKey = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RC4");

        jLabel2.setText("Metode              ");

        buttonGroup1.add(radioEnkripsi);
        radioEnkripsi.setSelected(true);
        radioEnkripsi.setText("Enkripsi");
        radioEnkripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioEnkripsiActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioDekripsi);
        radioDekripsi.setText("Dekripsi");
        radioDekripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDekripsiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioEnkripsi)
                .addGap(63, 63, 63)
                .addComponent(radioDekripsi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(radioEnkripsi)
                    .addComponent(radioDekripsi))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel4.setText("Pilih File Input   ");

        buttonInputText.setText("Plaintext");
        buttonInputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInputTextActionPerformed(evt);
            }
        });

        buttonInputKey.setText("Key");
        buttonInputKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInputKeyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonInputKey, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(buttonInputText)
                    .addComponent(buttonInputKey))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3.setText("PROSES");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioEnkripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioEnkripsiActionPerformed
        buttonInputText.setText("Plaintext");
    }//GEN-LAST:event_radioEnkripsiActionPerformed

    private void buttonInputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInputTextActionPerformed
        BufferedReader bf;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                bf = new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath())));
                String temp = bf.readLine();
                //merubah input ke biner disimpan dalam variabel keyBiner
                for (int a = 0; a < temp.length(); a++) {
                    String biner = Integer.toBinaryString((int) temp.charAt(a));
                    while (biner.length() < 8) {
                        biner = "0" + biner;
                    }
                    inputText += biner;
                }
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
//        System.out.println(inputText);
    }//GEN-LAST:event_buttonInputTextActionPerformed

    private void buttonInputKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInputKeyActionPerformed

        BufferedReader bf;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            //GET OUTPUT PATH
            outputPath = file.getAbsolutePath();
            int b = outputPath.length()-1;
            while(outputPath.charAt(b)!='\\'){
                b--;
            }
            outputPath = outputPath.substring(0, b+1);
            //END OF GET OUTPUT PATH
            try {
                bf = new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath())));
                String temp = bf.readLine();
                keyString = temp;
                //merubah input ke biner disimpan dalam variabel keyBiner
                for (int a = 0; a < temp.length(); a++) {
                    String biner = Integer.toBinaryString((int) temp.charAt(a));
                    while (biner.length() < 8) {
                        biner = "0" + biner;
                    }
                    keyBiner += biner;
                }
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
//        System.out.println(keyBiner);
    }//GEN-LAST:event_buttonInputKeyActionPerformed

    private static void enkripsi() {
        //INITIALIZATION
        for (int i = 0; i <= 255; i++) {
            s[i] = i;
            t[i] = (int) keyString.charAt(i % keyString.length());
        }
        //END OF INITIALIZATION

        //INITIAL PERMUTATION
        int i = 0, j = 0;
        for (i = 0; i <= 255; i++) {
            j = (j + s[i] + t[i]) % 256;
            //SWAP
            int temp = s[i];
            s[i] = s[j];
            s[j] = temp;
        }
        //END OF INITIAL PERMUTATION
        
        //WRITE TO OUTPUT
        output1 += "TABEL S SETELAH PERMUTASI AWAL\n";
        for(int a = 0; a <= 255; a++){
            output1 +="S["+ a + "] = " + s[a] + "\n";
        }
        
        //STREAM GENERATION
        i = 0;
        j = 0;
        for (int a = 0; a < inputText.length() / 8; a++) {
            i = (i + 1) % 256;
            j = (j + s[i]) % 256;
            //SWAP
            int temp = s[i];
            s[i] = s[j];
            s[j] = temp;
            //////

            int t = (s[i] + s[j]) % 256;
            String biner = Integer.toBinaryString(s[t]);
            while (biner.length() < 8) {
                biner = "0" + biner;
            }
//            System.out.println(Integer.toHexString(Integer.valueOf(biner, 2)));
            keyStreamBiner += biner;
        }
        //END OF STREAM GENERATION

        //WRITE TO OUTPUT
        output1 += "\nTABEL S SETELAH ENKRIPSI\n";
        for(int a = 0; a <= 255; a++){
            output1 += "S[" +a + "] = " + s[a] + "\n";
        }
        
        //XOR KEYSTREAM(biner) WITH PLAINTEXT(biner)
        for (int a = 0; a < inputText.length(); a++) {
            String temp = "";
            if (keyStreamBiner.charAt(a) == inputText.charAt(a)) {
                temp = "0";
            } else {
                temp = "1";
            }
            chiperTextBiner += temp;
        }

        for (int a = 0; a < chiperTextBiner.length(); a += 8) {
            System.out.print(Integer.toHexString(Integer.valueOf(chiperTextBiner.substring(a, a + 8), 2)) + " ");
            chiperTextHexa += Integer.toHexString(Integer.valueOf(chiperTextBiner.substring(a, a + 8), 2));
            chiperTextString += "" + (char) (int) Integer.valueOf(chiperTextBiner.substring(a,a+8), 2);
        }
        output2 += "CHIPERTEXT DALAM BINER :\n" + chiperTextBiner;
        output2 += "\nCHIPERTEXT DALAM HEXA :\n" + chiperTextHexa;
        output2 += "\nCHIPERTEXT DALAM ASCII :\n" + chiperTextString;
        
        writeHasilEnkripsiToFile();
    }

    static void writeHasilEnkripsiToFile() {
//        System.out.println(outputPath);

        try {
            File file1 = new File(outputPath + "output1.txt");
            File file2 = new File(outputPath + "output2.txt");
            
            // if file doesnt exists, then create it
            
                try {
                    file1.createNewFile();
                    file2.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(RC4.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            FileWriter fw1 = new FileWriter(file1.getAbsoluteFile());
            FileWriter fw2 = new FileWriter(file2.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw1);
            bw.write(output1);
            bw.close();
            bw = new BufferedWriter(fw2);
            bw.write(output2);
            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(RC4.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static void dekripsi() {
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (radioEnkripsi.isSelected()) {
            enkripsi();
        } else {
            dekripsi();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void radioDekripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioDekripsiActionPerformed
        buttonInputText.setText("Chipertext");
    }//GEN-LAST:event_radioDekripsiActionPerformed

    private static int[] s = new int[256];
    private static int[] t = new int[256];
    private static String keyBiner = "", inputText = "", keyStreamBiner = "", keyString = "", chiperTextBiner = "", chiperTextString = "", chiperTextHexa = "";
    private static String outputPath = "", output1 = "",  output2 = "";
//    private static int  j = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        System.out.println(Integer.toHexString(Integer.valueOf("1110000", 2)));
//        System.out.println(Integer.valueOf("A",16));
//        System.out.println(Integer.toHexString(16));
//        System.out.println(Integer.toBinaryString(255));
//        System.out.println((int)'p');
//        System.out.println(Integer.toBinaryString((int) 'p'));
//        System.out.println(3 ^ 1);
        System.out.println(Integer.valueOf("01110000", 2));
//        System.out.println((char) 65);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RC4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RC4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RC4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RC4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RC4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonInputKey;
    private javax.swing.JButton buttonInputText;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton radioDekripsi;
    private javax.swing.JRadioButton radioEnkripsi;
    // End of variables declaration//GEN-END:variables
}
